// <auto-generated>
// This code was auto-generated by a tool, every time
// the tool executes this code will be reset.
//
// If you need to extend the classes generated to add
// fields or methods to them, please create partial
// declarations in another file.
// </auto-generated>
#pragma warning disable 0109
#pragma warning disable 1591


namespace Quantum.Prototypes.Unity {
  using Photon.Deterministic;
  using Quantum;
  using Quantum.Core;
  using Quantum.Collections;
  using Quantum.Inspector;
  using Quantum.Physics2D;
  using Quantum.Physics3D;
  using Byte = System.Byte;
  using SByte = System.SByte;
  using Int16 = System.Int16;
  using UInt16 = System.UInt16;
  using Int32 = System.Int32;
  using UInt32 = System.UInt32;
  using Int64 = System.Int64;
  using UInt64 = System.UInt64;
  using Boolean = System.Boolean;
  using String = System.String;
  using Object = System.Object;
  using FlagsAttribute = System.FlagsAttribute;
  using SerializableAttribute = System.SerializableAttribute;
  using MethodImplAttribute = System.Runtime.CompilerServices.MethodImplAttribute;
  using MethodImplOptions = System.Runtime.CompilerServices.MethodImplOptions;
  using FieldOffsetAttribute = System.Runtime.InteropServices.FieldOffsetAttribute;
  using StructLayoutAttribute = System.Runtime.InteropServices.StructLayoutAttribute;
  using LayoutKind = System.Runtime.InteropServices.LayoutKind;
  #if QUANTUM_UNITY //;
  using TooltipAttribute = UnityEngine.TooltipAttribute;
  using HeaderAttribute = UnityEngine.HeaderAttribute;
  using SpaceAttribute = UnityEngine.SpaceAttribute;
  using RangeAttribute = UnityEngine.RangeAttribute;
  using HideInInspectorAttribute = UnityEngine.HideInInspector;
  using PreserveAttribute = UnityEngine.Scripting.PreserveAttribute;
  using FormerlySerializedAsAttribute = UnityEngine.Serialization.FormerlySerializedAsAttribute;
  using MovedFromAttribute = UnityEngine.Scripting.APIUpdating.MovedFromAttribute;
  using CreateAssetMenu = UnityEngine.CreateAssetMenuAttribute;
  using RuntimeInitializeOnLoadMethodAttribute = UnityEngine.RuntimeInitializeOnLoadMethodAttribute;
  #endif //;
  
  [System.SerializableAttribute()]
  public unsafe partial class PlayerComponentPrototype : Quantum.QuantumUnityPrototypeAdapter<Quantum.Prototypes.PlayerComponentPrototype> {
    [DynamicCollectionAttribute()]
    public Quantum.QuantumEntityPrototype[] FreeWorkers = {};
    partial void ConvertUser(Quantum.QuantumEntityPrototypeConverter converter, ref Quantum.Prototypes.PlayerComponentPrototype prototype);
    public override Quantum.Prototypes.PlayerComponentPrototype Convert(Quantum.QuantumEntityPrototypeConverter converter) {
      var result = new Quantum.Prototypes.PlayerComponentPrototype();
      converter.Convert(this.FreeWorkers, out result.FreeWorkers);
      ConvertUser(converter, ref result);
      return result;
    }
  }
  [System.SerializableAttribute()]
  public unsafe partial class ResourceCollectorComponentPrototype : Quantum.QuantumUnityPrototypeAdapter<Quantum.Prototypes.ResourceCollectorComponentPrototype> {
    public Quantum.QuantumEntityPrototype playerEntity;
    public Quantum.QEnum32<ResourceType> lookForResource;
    public Int32 workersAssigned;
    partial void ConvertUser(Quantum.QuantumEntityPrototypeConverter converter, ref Quantum.Prototypes.ResourceCollectorComponentPrototype prototype);
    public override Quantum.Prototypes.ResourceCollectorComponentPrototype Convert(Quantum.QuantumEntityPrototypeConverter converter) {
      var result = new Quantum.Prototypes.ResourceCollectorComponentPrototype();
      converter.Convert(this.playerEntity, out result.playerEntity);
      converter.Convert(this.lookForResource, out result.lookForResource);
      converter.Convert(this.workersAssigned, out result.workersAssigned);
      ConvertUser(converter, ref result);
      return result;
    }
  }
  [System.SerializableAttribute()]
  public unsafe partial class UnitComponentPrototype : Quantum.QuantumUnityPrototypeAdapter<Quantum.Prototypes.UnitComponentPrototype> {
    public Quantum.QEnum32<UnitState> state;
    public Quantum.QuantumEntityPrototype playerOwner;
    public Quantum.QuantumEntityPrototype buildingAssigned;
    public FP Speed;
    public FP HaverstTime;
    public FP DeployTime;
    public FP CurrentTime;
    public Int32 ResourcesCapacity;
    public Quantum.Prototypes.ResourceAmountPrototype inventory;
    public Quantum.QuantumEntityPrototype targetEntity;
    partial void ConvertUser(Quantum.QuantumEntityPrototypeConverter converter, ref Quantum.Prototypes.UnitComponentPrototype prototype);
    public override Quantum.Prototypes.UnitComponentPrototype Convert(Quantum.QuantumEntityPrototypeConverter converter) {
      var result = new Quantum.Prototypes.UnitComponentPrototype();
      converter.Convert(this.state, out result.state);
      converter.Convert(this.playerOwner, out result.playerOwner);
      converter.Convert(this.buildingAssigned, out result.buildingAssigned);
      converter.Convert(this.Speed, out result.Speed);
      converter.Convert(this.HaverstTime, out result.HaverstTime);
      converter.Convert(this.DeployTime, out result.DeployTime);
      converter.Convert(this.CurrentTime, out result.CurrentTime);
      converter.Convert(this.ResourcesCapacity, out result.ResourcesCapacity);
      converter.Convert(this.inventory, out result.inventory);
      converter.Convert(this.targetEntity, out result.targetEntity);
      ConvertUser(converter, ref result);
      return result;
    }
  }
}
#pragma warning restore 0109
#pragma warning restore 1591
