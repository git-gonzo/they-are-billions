// <auto-generated>
// This code was auto-generated by a tool, every time
// the tool executes this code will be reset.
//
// If you need to extend the classes generated to add
// fields or methods to them, please create partial
// declarations in another file.
// </auto-generated>
#pragma warning disable 0109
#pragma warning disable 1591


namespace Quantum.Prototypes {
  using Photon.Deterministic;
  using Quantum;
  using Quantum.Core;
  using Quantum.Collections;
  using Quantum.Inspector;
  using Quantum.Physics2D;
  using Quantum.Physics3D;
  using Byte = System.Byte;
  using SByte = System.SByte;
  using Int16 = System.Int16;
  using UInt16 = System.UInt16;
  using Int32 = System.Int32;
  using UInt32 = System.UInt32;
  using Int64 = System.Int64;
  using UInt64 = System.UInt64;
  using Boolean = System.Boolean;
  using String = System.String;
  using Object = System.Object;
  using FlagsAttribute = System.FlagsAttribute;
  using SerializableAttribute = System.SerializableAttribute;
  using MethodImplAttribute = System.Runtime.CompilerServices.MethodImplAttribute;
  using MethodImplOptions = System.Runtime.CompilerServices.MethodImplOptions;
  using FieldOffsetAttribute = System.Runtime.InteropServices.FieldOffsetAttribute;
  using StructLayoutAttribute = System.Runtime.InteropServices.StructLayoutAttribute;
  using LayoutKind = System.Runtime.InteropServices.LayoutKind;
  #if QUANTUM_UNITY //;
  using TooltipAttribute = UnityEngine.TooltipAttribute;
  using HeaderAttribute = UnityEngine.HeaderAttribute;
  using SpaceAttribute = UnityEngine.SpaceAttribute;
  using RangeAttribute = UnityEngine.RangeAttribute;
  using HideInInspectorAttribute = UnityEngine.HideInInspector;
  using PreserveAttribute = UnityEngine.Scripting.PreserveAttribute;
  using FormerlySerializedAsAttribute = UnityEngine.Serialization.FormerlySerializedAsAttribute;
  using MovedFromAttribute = UnityEngine.Scripting.APIUpdating.MovedFromAttribute;
  using CreateAssetMenu = UnityEngine.CreateAssetMenuAttribute;
  using RuntimeInitializeOnLoadMethodAttribute = UnityEngine.RuntimeInitializeOnLoadMethodAttribute;
  #endif //;
  
  [System.SerializableAttribute()]
  [Quantum.Prototypes.Prototype(typeof(Quantum.AnimalComponent))]
  public unsafe partial class AnimalComponentPrototype : ComponentPrototype<Quantum.AnimalComponent> {
    public FP Speed;
    partial void MaterializeUser(Frame frame, ref Quantum.AnimalComponent result, in PrototypeMaterializationContext context);
    public override Boolean AddToEntity(FrameBase f, EntityRef entity, in PrototypeMaterializationContext context) {
        Quantum.AnimalComponent component = default;
        Materialize((Frame)f, ref component, in context);
        return f.Set(entity, component) == SetResult.ComponentAdded;
    }
    public void Materialize(Frame frame, ref Quantum.AnimalComponent result, in PrototypeMaterializationContext context = default) {
        result.Speed = this.Speed;
        MaterializeUser(frame, ref result, in context);
    }
  }
  [System.SerializableAttribute()]
  [Quantum.Prototypes.Prototype(typeof(Quantum.Data))]
  public unsafe partial class DataPrototype : UnionPrototype {
    public string _field_used_;
    public Quantum.Prototypes.UnitDataPrototype unitData;
    public Quantum.Prototypes.FarmerDataPrototype farmerData;
    partial void MaterializeUser(Frame frame, ref Quantum.Data result, in PrototypeMaterializationContext context);
    public void Materialize(Frame frame, ref Quantum.Data result, in PrototypeMaterializationContext context = default) {
        switch (_field_used_) {
          case "UNITDATA": this.unitData.Materialize(frame, ref *result.unitData, in context); break;
          case "FARMERDATA": this.farmerData.Materialize(frame, ref *result.farmerData, in context); break;
          case "": case null: break;
          default: PrototypeValidator.UnknownUnionField(_field_used_, in context); break;
        }
        MaterializeUser(frame, ref result, in context);
    }
  }
  [System.SerializableAttribute()]
  [Quantum.Prototypes.Prototype(typeof(Quantum.FarmerComponent))]
  public unsafe partial class FarmerComponentPrototype : ComponentPrototype<Quantum.FarmerComponent> {
    [HideInInspector()]
    public Int32 _empty_prototype_dummy_field_;
    partial void MaterializeUser(Frame frame, ref Quantum.FarmerComponent result, in PrototypeMaterializationContext context);
    public override Boolean AddToEntity(FrameBase f, EntityRef entity, in PrototypeMaterializationContext context) {
        Quantum.FarmerComponent component = default;
        Materialize((Frame)f, ref component, in context);
        return f.Set(entity, component) == SetResult.ComponentAdded;
    }
    public void Materialize(Frame frame, ref Quantum.FarmerComponent result, in PrototypeMaterializationContext context = default) {
        MaterializeUser(frame, ref result, in context);
    }
  }
  [System.SerializableAttribute()]
  [Quantum.Prototypes.Prototype(typeof(Quantum.FarmerData))]
  public unsafe partial class FarmerDataPrototype : StructPrototype {
    public AssetRef<FarmerAsset> farmerAsset;
    partial void MaterializeUser(Frame frame, ref Quantum.FarmerData result, in PrototypeMaterializationContext context);
    public void Materialize(Frame frame, ref Quantum.FarmerData result, in PrototypeMaterializationContext context = default) {
        result.farmerAsset = this.farmerAsset;
        MaterializeUser(frame, ref result, in context);
    }
  }
  [System.SerializableAttribute()]
  [Quantum.Prototypes.Prototype(typeof(Quantum.HealthComponent))]
  public unsafe partial class HealthComponentPrototype : ComponentPrototype<Quantum.HealthComponent> {
    public FP MaxHealth;
    partial void MaterializeUser(Frame frame, ref Quantum.HealthComponent result, in PrototypeMaterializationContext context);
    public override Boolean AddToEntity(FrameBase f, EntityRef entity, in PrototypeMaterializationContext context) {
        Quantum.HealthComponent component = default;
        Materialize((Frame)f, ref component, in context);
        return f.Set(entity, component) == SetResult.ComponentAdded;
    }
    public void Materialize(Frame frame, ref Quantum.HealthComponent result, in PrototypeMaterializationContext context = default) {
        result.MaxHealth = this.MaxHealth;
        MaterializeUser(frame, ref result, in context);
    }
  }
  [System.SerializableAttribute()]
  [Quantum.Prototypes.Prototype(typeof(Quantum.Input))]
  public unsafe partial class InputPrototype : StructPrototype {
    [HideInInspector()]
    public Int32 _empty_prototype_dummy_field_;
    partial void MaterializeUser(Frame frame, ref Quantum.Input result, in PrototypeMaterializationContext context);
    public void Materialize(Frame frame, ref Quantum.Input result, in PrototypeMaterializationContext context = default) {
        MaterializeUser(frame, ref result, in context);
    }
  }
  [System.SerializableAttribute()]
  [Quantum.Prototypes.Prototype(typeof(Quantum.PlayerComponent))]
  public unsafe class PlayerComponentPrototype : ComponentPrototype<Quantum.PlayerComponent> {
    [DynamicCollectionAttribute()]
    public MapEntityId[] FreeWorkers = {};
    public override Boolean AddToEntity(FrameBase f, EntityRef entity, in PrototypeMaterializationContext context) {
        Quantum.PlayerComponent component = default;
        Materialize((Frame)f, ref component, in context);
        return f.Set(entity, component) == SetResult.ComponentAdded;
    }
    public void Materialize(Frame frame, ref Quantum.PlayerComponent result, in PrototypeMaterializationContext context = default) {
        if (this.FreeWorkers.Length == 0) {
          result.FreeWorkers = default;
        } else {
          var list = frame.AllocateList(out result.FreeWorkers, this.FreeWorkers.Length);
          for (int i = 0; i < this.FreeWorkers.Length; ++i) {
            EntityRef tmp = default;
            PrototypeValidator.FindMapEntity(this.FreeWorkers[i], in context, out tmp);
            list.Add(tmp);
          }
        }
    }
  }
  [System.SerializableAttribute()]
  [Quantum.Prototypes.Prototype(typeof(Quantum.PlayerEconomyComponent))]
  public unsafe partial class PlayerEconomyComponentPrototype : ComponentPrototype<Quantum.PlayerEconomyComponent> {
    [DynamicCollectionAttribute()]
    public Quantum.Prototypes.ResourceAmountPrototype[] resources = {};
    partial void MaterializeUser(Frame frame, ref Quantum.PlayerEconomyComponent result, in PrototypeMaterializationContext context);
    public override Boolean AddToEntity(FrameBase f, EntityRef entity, in PrototypeMaterializationContext context) {
        Quantum.PlayerEconomyComponent component = default;
        Materialize((Frame)f, ref component, in context);
        return f.Set(entity, component) == SetResult.ComponentAdded;
    }
    public void Materialize(Frame frame, ref Quantum.PlayerEconomyComponent result, in PrototypeMaterializationContext context = default) {
        if (this.resources.Length == 0) {
          result.resources = default;
        } else {
          var list = frame.AllocateList(out result.resources, this.resources.Length);
          for (int i = 0; i < this.resources.Length; ++i) {
            Quantum.ResourceAmount tmp = default;
            this.resources[i].Materialize(frame, ref tmp, in context);
            list.Add(tmp);
          }
        }
        MaterializeUser(frame, ref result, in context);
    }
  }
  [System.SerializableAttribute()]
  [Quantum.Prototypes.Prototype(typeof(Quantum.PlayerLink))]
  public unsafe partial class PlayerLinkPrototype : ComponentPrototype<Quantum.PlayerLink> {
    public PlayerRef PlayerRef;
    partial void MaterializeUser(Frame frame, ref Quantum.PlayerLink result, in PrototypeMaterializationContext context);
    public override Boolean AddToEntity(FrameBase f, EntityRef entity, in PrototypeMaterializationContext context) {
        Quantum.PlayerLink component = default;
        Materialize((Frame)f, ref component, in context);
        return f.Set(entity, component) == SetResult.ComponentAdded;
    }
    public void Materialize(Frame frame, ref Quantum.PlayerLink result, in PrototypeMaterializationContext context = default) {
        result.PlayerRef = this.PlayerRef;
        MaterializeUser(frame, ref result, in context);
    }
  }
  [System.SerializableAttribute()]
  [Quantum.Prototypes.Prototype(typeof(Quantum.ResourceAmount))]
  public unsafe partial class ResourceAmountPrototype : StructPrototype {
    public Quantum.QEnum32<ResourceType> Resource;
    public Int32 Amount;
    partial void MaterializeUser(Frame frame, ref Quantum.ResourceAmount result, in PrototypeMaterializationContext context);
    public void Materialize(Frame frame, ref Quantum.ResourceAmount result, in PrototypeMaterializationContext context = default) {
        result.Resource = this.Resource;
        result.Amount = this.Amount;
        MaterializeUser(frame, ref result, in context);
    }
  }
  [System.SerializableAttribute()]
  [Quantum.Prototypes.Prototype(typeof(Quantum.ResourceCollectorComponent))]
  public unsafe class ResourceCollectorComponentPrototype : ComponentPrototype<Quantum.ResourceCollectorComponent> {
    public MapEntityId playerEntity;
    public Quantum.QEnum32<ResourceType> lookForResource;
    public Int32 workersAssigned;
    public override Boolean AddToEntity(FrameBase f, EntityRef entity, in PrototypeMaterializationContext context) {
        Quantum.ResourceCollectorComponent component = default;
        Materialize((Frame)f, ref component, in context);
        return f.Set(entity, component) == SetResult.ComponentAdded;
    }
    public void Materialize(Frame frame, ref Quantum.ResourceCollectorComponent result, in PrototypeMaterializationContext context = default) {
        PrototypeValidator.FindMapEntity(this.playerEntity, in context, out result.playerEntity);
        result.lookForResource = this.lookForResource;
        result.workersAssigned = this.workersAssigned;
    }
  }
  [System.SerializableAttribute()]
  [Quantum.Prototypes.Prototype(typeof(Quantum.ResourceContainerComponent))]
  public unsafe partial class ResourceContainerComponentPrototype : ComponentPrototype<Quantum.ResourceContainerComponent> {
    public Quantum.Prototypes.ResourceAmountPrototype resources;
    public FP workerStopDistance;
    partial void MaterializeUser(Frame frame, ref Quantum.ResourceContainerComponent result, in PrototypeMaterializationContext context);
    public override Boolean AddToEntity(FrameBase f, EntityRef entity, in PrototypeMaterializationContext context) {
        Quantum.ResourceContainerComponent component = default;
        Materialize((Frame)f, ref component, in context);
        return f.Set(entity, component) == SetResult.ComponentAdded;
    }
    public void Materialize(Frame frame, ref Quantum.ResourceContainerComponent result, in PrototypeMaterializationContext context = default) {
        this.resources.Materialize(frame, ref result.resources, in context);
        result.workerStopDistance = this.workerStopDistance;
        MaterializeUser(frame, ref result, in context);
    }
  }
  [System.SerializableAttribute()]
  [Quantum.Prototypes.Prototype(typeof(Quantum.ResourcesSpawnPointComponent))]
  public unsafe partial class ResourcesSpawnPointComponentPrototype : ComponentPrototype<Quantum.ResourcesSpawnPointComponent> {
    [DynamicCollectionAttribute()]
    public AssetRef<EntityPrototype>[] Resources = {};
    public FPVector2 treeCountRange;
    public FPVector2 size;
    public FP separation;
    partial void MaterializeUser(Frame frame, ref Quantum.ResourcesSpawnPointComponent result, in PrototypeMaterializationContext context);
    public override Boolean AddToEntity(FrameBase f, EntityRef entity, in PrototypeMaterializationContext context) {
        Quantum.ResourcesSpawnPointComponent component = default;
        Materialize((Frame)f, ref component, in context);
        return f.Set(entity, component) == SetResult.ComponentAdded;
    }
    public void Materialize(Frame frame, ref Quantum.ResourcesSpawnPointComponent result, in PrototypeMaterializationContext context = default) {
        if (this.Resources.Length == 0) {
          result.Resources = default;
        } else {
          var list = frame.AllocateList(out result.Resources, this.Resources.Length);
          for (int i = 0; i < this.Resources.Length; ++i) {
            AssetRef<EntityPrototype> tmp = default;
            tmp = this.Resources[i];
            list.Add(tmp);
          }
        }
        result.treeCountRange = this.treeCountRange;
        result.size = this.size;
        result.separation = this.separation;
        MaterializeUser(frame, ref result, in context);
    }
  }
  [System.SerializableAttribute()]
  [Quantum.Prototypes.Prototype(typeof(Quantum.UnitComponent))]
  public unsafe partial class UnitComponentPrototype : ComponentPrototype<Quantum.UnitComponent> {
    public AssetRef<UnitAsset> unitAsset;
    public FP Speed;
    partial void MaterializeUser(Frame frame, ref Quantum.UnitComponent result, in PrototypeMaterializationContext context);
    public override Boolean AddToEntity(FrameBase f, EntityRef entity, in PrototypeMaterializationContext context) {
        Quantum.UnitComponent component = default;
        Materialize((Frame)f, ref component, in context);
        return f.Set(entity, component) == SetResult.ComponentAdded;
    }
    public void Materialize(Frame frame, ref Quantum.UnitComponent result, in PrototypeMaterializationContext context = default) {
        result.unitAsset = this.unitAsset;
        result.Speed = this.Speed;
        MaterializeUser(frame, ref result, in context);
    }
  }
  [System.SerializableAttribute()]
  [Quantum.Prototypes.Prototype(typeof(Quantum.UnitData))]
  public unsafe partial class UnitDataPrototype : StructPrototype {
    public AssetRef<UnitAsset> unitAsset;
    partial void MaterializeUser(Frame frame, ref Quantum.UnitData result, in PrototypeMaterializationContext context);
    public void Materialize(Frame frame, ref Quantum.UnitData result, in PrototypeMaterializationContext context = default) {
        result.unitAsset = this.unitAsset;
        MaterializeUser(frame, ref result, in context);
    }
  }
  [System.SerializableAttribute()]
  [Quantum.Prototypes.Prototype(typeof(Quantum.WorkerSpawnPointComponent))]
  public unsafe partial class WorkerSpawnPointComponentPrototype : ComponentPrototype<Quantum.WorkerSpawnPointComponent> {
    [HideInInspector()]
    public Int32 _empty_prototype_dummy_field_;
    partial void MaterializeUser(Frame frame, ref Quantum.WorkerSpawnPointComponent result, in PrototypeMaterializationContext context);
    public override Boolean AddToEntity(FrameBase f, EntityRef entity, in PrototypeMaterializationContext context) {
        Quantum.WorkerSpawnPointComponent component = default;
        Materialize((Frame)f, ref component, in context);
        return f.Set(entity, component) == SetResult.ComponentAdded;
    }
    public void Materialize(Frame frame, ref Quantum.WorkerSpawnPointComponent result, in PrototypeMaterializationContext context = default) {
        MaterializeUser(frame, ref result, in context);
    }
  }
}
#pragma warning restore 0109
#pragma warning restore 1591
