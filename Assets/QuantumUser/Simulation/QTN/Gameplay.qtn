
component PlayerLink
{
	PlayerRef PlayerRef;
}

component PlayerComponent
{
	list<EntityRef> FreeWorkers;
}

component PlayerEconomyComponent
{
	list<ResourceAmount> resources;
}

component WorkerSpawnPointComponent{}
component ResourcesSpawnPointComponent
{
	list<AssetRef<EntityPrototype>> Resources;
	FPVector2 treeCountRange;
	FPVector2 size;
	FP separation;
}

component ResourceContainerComponent
{
	ResourceAmount resources;
	FP workerStopDistance;
}

component ResourceCollectorComponent
{
	EntityRef playerEntity;
	ResourceType lookForResource;
	int workersAssigned;
}

component UnitComponent
{
	[ExcludeFromPrototype] UnitState state;
	[ExcludeFromPrototype] EntityRef playerOwner;
	[ExcludeFromPrototype] EntityRef targetEntity;
	[ExcludeFromPrototype] FPVector3 patrolTarget;
	[ExcludeFromPrototype] FP CurrentTime;
	AssetRef<UnitAsset> unitAsset;
	//uAsset uuuasset;
	FP Speed;
}

component FarmerComponent
{
	[ExcludeFromPrototype] EntityRef buildingAssigned;
	[ExcludeFromPrototype] ResourceAmount inventory;

	
	
}

component AnimalComponent
{
	FP Speed;
	[ExcludeFromPrototype] AnimalState state;
	[ExcludeFromPrototype] FP CurrentTime;
	[ExcludeFromPrototype] FPVector3 Origin;
}

enum UnitState
{
	Idle,
	Moving,
	Attacking,
	Harversting,
	Deploying
}

enum AnimalState
{
	Idle,
	Eating,
	Moving,
	Running
}

enum ResourceType
{
	None,
	Stone,
	Wood,
	Meat
}

//this marked as serializable in a partial struct
struct ResourceAmount
{
	ResourceType Resource;
	int Amount;
}

component HealthComponent
{
	[ExcludeFromPrototype] FP CurrentHealth;
	FP MaxHealth;
}

struct UnitData
{
  AssetRef<UnitAsset> unitAsset;
}

struct FarmerData
{
  AssetRef<FarmerAsset> farmerAsset;
}

union Data
{
  UnitData unitData;
  FarmerData farmerData;
}